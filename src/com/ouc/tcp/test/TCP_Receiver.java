package com.ouc.tcp.test;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import com.ouc.tcp.client.TCP_Receiver_ADT;
import com.ouc.tcp.message.*;
import com.ouc.tcp.tool.TCP_TOOL;

public class TCP_Receiver extends TCP_Receiver_ADT {
	
	int sequence=1;//用于记录当前待接收的包序号
	private TCP_PACKET ackPack;	//回复的ACK报文段

	public static int num = 0;
	private int lastSeq = 1;
	private HashMap<Integer, TCP_PACKET> recived = new HashMap<Integer, TCP_PACKET>();// 收到的无错报文段池
	private TCP_PACKET neededPacket;// 临时记录当前需要交付的报文段

	/*构造函数*/
	public TCP_Receiver() {
		super();	//调用超类构造函数
		super.initTCP_Receiver(this);	//初始化TCP接收端
	}

	@Override
	//接收到数据报：检查校验和，设置回复的ACK报文段
	public void rdt_recv(TCP_PACKET recvPack) {
		//检查校验码，生成ACK
		//if(CheckSum.computeChkSum(recvPack) == recvPack.getTcpH().getTh_sum()) {

			//生成ACK报文段（设置确认号）
			tcpH.setTh_ack(recvPack.getTcpH().getTh_seq());
			ackPack = new TCP_PACKET(tcpH, tcpS, recvPack.getSourceAddr());
			//tcpH.setTh_sum(CheckSum.computeChkSum(ackPack));
		if (CheckSum.computeChkSum(recvPack) != 0) {
			tcpH.setTh_ack(recvPack.getTcpH().getTh_seq() - recvPack.getTcpS().getData().length);
			reply(ackPack);
			num++;
			System.out.println();
			return;
		}

		if (recvPack.getTcpH().getTh_seq() >= lastSeq) {
			recived.put(recvPack.getTcpH().getTh_seq(), recvPack);
		}
			//回复ACK报文段
			reply(ackPack);	
			
			//有重复数据的情况下需要检查数据顺序号（确定是否接收了重复的数据）
			//去除报文中的顺序号
			/*int seq = recvPack.getTcpH().getTh_seq();

		
			//判断是否是重复数据：非重复数据，将数据插入data队列
			int[] data = recvPack.getTcpS().getData();
			dataQueue.add(data);
			//更新期待接收的顺序号
			sequence=sequence+data.length;
		}

		//向上层应用――写文件，交付数据
		if(dataQueue.size() >= 20) 
			deliver_data();	*/
		dataQueue.add(recvPack.getTcpS().getData());
		// 交付数据（每20组数据交付一次）
		if (dataQueue.size() == 20) {
			deliver_data();
		}
		System.out.println();
	}

	@Override
	//交付数据（将数据写入文件）
	public void deliver_data() {
		//检查dataQueue，将数据写入文件
		File fw = new File("recvData.txt");
		BufferedWriter writer;
		
		try {
			writer = new BufferedWriter(new FileWriter(fw, true));
			
			//循环检查data队列中是否有新交付数据
			while(!dataQueue.isEmpty()) {
				int[] data = dataQueue.poll();
				
				//将数据写入文件
				for(int i = 0; i < data.length; i++) {
					writer.write(data[i] + "\n");
				}
				
				writer.flush();		//清空输出缓存
			}
			writer.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	//回复ACK报文段
	public void reply(TCP_PACKET replyPack) {
		//设置错误控制标志
		tcpH.setTh_eflag((byte) 1);	//eFlag=0，信道无错误
		
		//发送数据报
		client.send(replyPack);		
		
	}
	
}
